#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass paper
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
PROJECT 3: 
\end_layout

\begin_layout SubTitle
Project with NuSMV 
\end_layout

\begin_layout Author
Nikolay Nikolov
\end_layout

\begin_layout Date
Summer 2020
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section*
Problem 2
\end_layout

\begin_layout Description
Tasks: 
\end_layout

\begin_layout Description
1) Read the tutorial of Nusmv 2.5 and learn the syntax, draw the state diagram
 of above code.
 
\end_layout

\begin_layout Subsection*
Verify formula
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

NuSMV > read_model -i short.smv 
\end_layout

\begin_layout Plain Layout

NuSMV > flatten_hierarchy 
\end_layout

\begin_layout Plain Layout

NuSMV > encode_variables 
\end_layout

\begin_layout Plain Layout

NuSMV > build_model 
\end_layout

\begin_layout Plain Layout

NuSMV > check_ctlspec
\end_layout

\begin_layout Plain Layout

-- specification AG (request -> AF state = busy)  is true
\end_layout

\begin_layout Plain Layout

NuSMV > check_ctlspec -p "AG(request ->AX(state=busy))
\end_layout

\begin_layout Plain Layout

ignoring unbalanced quote ...
\end_layout

\begin_layout Plain Layout

-- specification AG (request -> AX state = busy)  is false
\end_layout

\begin_layout Plain Layout

-- as demonstrated by the following execution sequence
\end_layout

\begin_layout Plain Layout

Trace Description: CTL Counterexample 
\end_layout

\begin_layout Plain Layout

Trace Type: Counterexample 
\end_layout

\begin_layout Plain Layout

  -- Loop starts here
\end_layout

\begin_layout Plain Layout

  -> State: 1.1 <-
\end_layout

\begin_layout Plain Layout

    request = FALSE
\end_layout

\begin_layout Plain Layout

    state = ready
\end_layout

\begin_layout Plain Layout

  -> State: 1.2 <-
\end_layout

\begin_layout Plain Layout

    request = TRUE
\end_layout

\begin_layout Plain Layout

    state = busy
\end_layout

\begin_layout Plain Layout

  -> State: 1.3 <-
\end_layout

\begin_layout Plain Layout

    request = FALSE
\end_layout

\begin_layout Plain Layout

    state = ready
\end_layout

\begin_layout Plain Layout

NuSMV > 
\end_layout

\begin_layout Plain Layout

*******  Simulation Starting From State 1.4   ********
\end_layout

\begin_layout Plain Layout

NuSMV > show_traces -v  
\end_layout

\begin_layout Plain Layout

    <!-- ################### Trace number: 1 ################### -->
\end_layout

\begin_layout Plain Layout

Trace Description: Simulation Trace 
\end_layout

\begin_layout Plain Layout

Trace Type: Simulation 
\end_layout

\begin_layout Plain Layout

  -> State: 1.1 <-
\end_layout

\begin_layout Plain Layout

    request = FALSE
\end_layout

\begin_layout Plain Layout

    state = ready
\end_layout

\begin_layout Plain Layout

  -> State: 1.2 <-
\end_layout

\begin_layout Plain Layout

    request = TRUE
\end_layout

\begin_layout Plain Layout

    state = ready
\end_layout

\begin_layout Plain Layout

  -> State: 1.3 <-
\end_layout

\begin_layout Plain Layout

    request = TRUE
\end_layout

\begin_layout Plain Layout

    state = busy
\end_layout

\begin_layout Plain Layout

  -> State: 1.4 <-
\end_layout

\begin_layout Plain Layout

    request = FALSE
\end_layout

\begin_layout Plain Layout

    state = ready
\end_layout

\begin_layout Plain Layout

  -> State: 1.5 <-
\end_layout

\begin_layout Plain Layout

    request = TRUE
\end_layout

\begin_layout Plain Layout

    state = ready
\end_layout

\begin_layout Plain Layout

  -> State: 1.6 <-
\end_layout

\begin_layout Plain Layout

    request = FALSE
\end_layout

\begin_layout Plain Layout

    state = busy
\end_layout

\begin_layout Plain Layout

  -> State: 1.7 <-
\end_layout

\begin_layout Plain Layout

    request = FALSE
\end_layout

\begin_layout Plain Layout

    state = ready
\end_layout

\begin_layout Plain Layout

  -> State: 1.8 <-
\end_layout

\begin_layout Plain Layout

    request = TRUE
\end_layout

\begin_layout Plain Layout

    state = ready
\end_layout

\begin_layout Plain Layout

  -> State: 1.9 <-
\end_layout

\begin_layout Plain Layout

    request = TRUE
\end_layout

\begin_layout Plain Layout

    state = busy
\end_layout

\begin_layout Plain Layout

  -> State: 1.10 <-
\end_layout

\begin_layout Plain Layout

    request = FALSE
\end_layout

\begin_layout Plain Layout

    state = busy
\end_layout

\begin_layout Plain Layout

  -> State: 1.11 <-
\end_layout

\begin_layout Plain Layout

    request = TRUE
\end_layout

\begin_layout Plain Layout

    state = busy
\end_layout

\begin_layout Plain Layout

  -> State: 1.12 <-
\end_layout

\begin_layout Plain Layout

    request = FALSE
\end_layout

\begin_layout Plain Layout

    state = ready
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
State Diagram
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename /home/nik/Documents/582_PROJ/projects/project_3/assets/state_diagram_problem2.png

\end_inset


\end_layout

\begin_layout Subsection*
Come up with 3 more CTL properties and check against the model.
 
\end_layout

\begin_layout Subsubsection*
1)
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

NuSMV > check_ctlspec -p "AG(request -> EF(state=busy))" 
\end_layout

\begin_layout Plain Layout

-- specification AG (request -> EF state = busy)  is true
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
2)
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

NuSMV > check_ctlspec -p "EF(request -> AG(state=busy))"
\end_layout

\begin_layout Plain Layout

-- specification EF (request -> AG state = busy)  is true
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
3)
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

NuSMV > check_ctlspec -p "EF(request -> AG(state=busy))"
\end_layout

\begin_layout Plain Layout

-- specification EF (request -> AG state = busy)  is true
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
4)
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

NuSMV > check_ctlspec -p "AG(request -> EF(state=ready))"
\end_layout

\begin_layout Plain Layout

-- specification AG (request -> EF state = ready)  is true
\end_layout

\end_inset


\end_layout

\begin_layout Section*
Problem 3:
\end_layout

\begin_layout Subsection*
State Diagram
\end_layout

\begin_layout Description
\begin_inset Graphics
	filename /home/nik/Documents/582_PROJ/projects/project_3/assets/state_diagram.png

\end_inset


\end_layout

\begin_layout Subsubsection*
Trace
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

NuSMV > read_model -i counter.smv
\end_layout

\begin_layout Plain Layout

NuSMV > flatten_hierarchy 
\end_layout

\begin_layout Plain Layout

NuSMV > encode_variables 
\end_layout

\begin_layout Plain Layout

NuSMV > build_model 
\end_layout

\begin_layout Plain Layout

NuSMV > pick_state -i
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

***************  AVAILABLE STATES  *************
\end_layout

\begin_layout Plain Layout

  
\end_layout

\begin_layout Plain Layout

  ================= State =================
\end_layout

\begin_layout Plain Layout

  0) -------------------------
\end_layout

\begin_layout Plain Layout

  bit0.carry_out = FALSE
\end_layout

\begin_layout Plain Layout

  bit0.value = FALSE
\end_layout

\begin_layout Plain Layout

  bit1.carry_out = FALSE
\end_layout

\begin_layout Plain Layout

  bit1.value = FALSE
\end_layout

\begin_layout Plain Layout

  bit2.carry_out = FALSE
\end_layout

\begin_layout Plain Layout

  bit2.value = FALSE
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

********  Simulation Starting From State 1.4   ********
\end_layout

\begin_layout Plain Layout

NuSMV > show_traces -v  
\end_layout

\begin_layout Plain Layout

    <!-- ################### Trace number: 1 ################### -->
\end_layout

\begin_layout Plain Layout

Trace Description: Simulation Trace 
\end_layout

\begin_layout Plain Layout

Trace Type: Simulation 
\end_layout

\begin_layout Plain Layout

  -> State: 1.1 <-
\end_layout

\begin_layout Plain Layout

    bit0.value = FALSE
\end_layout

\begin_layout Plain Layout

    bit1.value = FALSE
\end_layout

\begin_layout Plain Layout

    bit2.value = FALSE
\end_layout

\begin_layout Plain Layout

    bit0.carry_out = FALSE
\end_layout

\begin_layout Plain Layout

    bit1.carry_out = FALSE
\end_layout

\begin_layout Plain Layout

    bit2.carry_out = FALSE
\end_layout

\begin_layout Plain Layout

  -> State: 1.2 <-
\end_layout

\begin_layout Plain Layout

    bit0.value = TRUE
\end_layout

\begin_layout Plain Layout

    bit1.value = FALSE
\end_layout

\begin_layout Plain Layout

    bit2.value = FALSE
\end_layout

\begin_layout Plain Layout

    bit0.carry_out = TRUE
\end_layout

\begin_layout Plain Layout

    bit1.carry_out = FALSE
\end_layout

\begin_layout Plain Layout

    bit2.carry_out = FALSE
\end_layout

\begin_layout Plain Layout

  -> State: 1.3 <-
\end_layout

\begin_layout Plain Layout

    bit0.value = FALSE
\end_layout

\begin_layout Plain Layout

    bit1.value = TRUE
\end_layout

\begin_layout Plain Layout

    bit2.value = FALSE
\end_layout

\begin_layout Plain Layout

    bit0.carry_out = FALSE
\end_layout

\begin_layout Plain Layout

    bit1.carry_out = FALSE
\end_layout

\begin_layout Plain Layout

    bit2.carry_out = FALSE
\end_layout

\begin_layout Plain Layout

  -> State: 1.4 <-
\end_layout

\begin_layout Plain Layout

    bit0.value = TRUE
\end_layout

\begin_layout Plain Layout

    bit1.value = TRUE
\end_layout

\begin_layout Plain Layout

    bit2.value = FALSE
\end_layout

\begin_layout Plain Layout

    bit0.carry_out = TRUE
\end_layout

\begin_layout Plain Layout

    bit1.carry_out = TRUE
\end_layout

\begin_layout Plain Layout

    bit2.carry_out = FALSE
\end_layout

\begin_layout Plain Layout

  -> State: 1.5 <-
\end_layout

\begin_layout Plain Layout

    bit0.value = FALSE
\end_layout

\begin_layout Plain Layout

    bit1.value = FALSE
\end_layout

\begin_layout Plain Layout

    bit2.value = TRUE
\end_layout

\begin_layout Plain Layout

    bit0.carry_out = FALSE
\end_layout

\begin_layout Plain Layout

    bit1.carry_out = FALSE
\end_layout

\begin_layout Plain Layout

    bit2.carry_out = FALSE
\end_layout

\begin_layout Plain Layout

  -> State: 1.6 <-
\end_layout

\begin_layout Plain Layout

    bit0.value = TRUE
\end_layout

\begin_layout Plain Layout

    bit1.value = FALSE
\end_layout

\begin_layout Plain Layout

    bit2.value = TRUE
\end_layout

\begin_layout Plain Layout

    bit0.carry_out = TRUE
\end_layout

\begin_layout Plain Layout

    bit1.carry_out = FALSE
\end_layout

\begin_layout Plain Layout

    bit2.carry_out = FALSE
\end_layout

\begin_layout Plain Layout

  -> State: 1.7 <-
\end_layout

\begin_layout Plain Layout

    bit0.value = FALSE
\end_layout

\begin_layout Plain Layout

    bit1.value = TRUE
\end_layout

\begin_layout Plain Layout

    bit2.value = TRUE
\end_layout

\begin_layout Plain Layout

    bit0.carry_out = FALSE
\end_layout

\begin_layout Plain Layout

    bit1.carry_out = FALSE
\end_layout

\begin_layout Plain Layout

    bit2.carry_out = FALSE
\end_layout

\begin_layout Plain Layout

  -> State: 1.8 <-
\end_layout

\begin_layout Plain Layout

    bit0.value = TRUE
\end_layout

\begin_layout Plain Layout

    bit1.value = TRUE
\end_layout

\begin_layout Plain Layout

    bit2.value = TRUE
\end_layout

\begin_layout Plain Layout

    bit0.carry_out = TRUE
\end_layout

\begin_layout Plain Layout

    bit1.carry_out = TRUE
\end_layout

\begin_layout Plain Layout

    bit2.carry_out = TRUE
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\SpecialChar allowbreak

\end_layout

\begin_layout Subsection*
2) Come up with 3 more CTL property and check against above model.
\end_layout

\begin_layout Subsection*
1)
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

NuSMV > check_ctlspec -p "EF(bit1.value=TRUE)"
\end_layout

\begin_layout Plain Layout

-- specification EF bit1.value = TRUE  is true
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
2)
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

NuSMV > check_ctlspec -p "EF(bit2.value=TRUE)"
\end_layout

\begin_layout Plain Layout

-- specification EF bit2.value = TRUE  is true
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
3) 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

NuSMV > check_ctlspec -p "EF(bit0.value=TRUE)"
\end_layout

\begin_layout Plain Layout

-- specification EF bit0.value = TRUE  is true
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
4)
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

NuSMV > check_ctlspec -p "EF(bit0.value=TRUE)"
\end_layout

\begin_layout Plain Layout

-- specification EF bit0.value = TRUE  is true
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
5)
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

NuSMV > check_ctlspec -p "EX(bit0.value=TRUE)"
\end_layout

\begin_layout Plain Layout

-- specification EX bit0.value = TRUE  is true
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
6)
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

NuSMV > check_ctlspec -p "EF(bit0.carry_out=FALSE)"
\end_layout

\begin_layout Plain Layout

-- specification EF bit0.carry_out = FALSE  is true
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
7) 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

NuSMV > check_ctlspec -p "EF(bit0.value=FALSE)"
\end_layout

\begin_layout Plain Layout

-- specification EF bit0.value = FALSE  is true
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
8)
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

NuSMV > check_ctlspec -p "AX(bit0.carry_out=TRUE)" 
\end_layout

\begin_layout Plain Layout

-- specification AX bit0.carry_out = TRUE  is true
\end_layout

\end_inset


\end_layout

\begin_layout Section*
Problem 4:
\end_layout

\begin_layout Subsection*
Tasks:
\end_layout

\begin_layout Subsubsection*
1) Understand the design and draw the transition diagram for the design
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection*
2) Propose 5 new CTL properties.
 Describe them in English first, then in CTL forms.
 Your properties should be different from those proposed by other students.
\end_layout

\begin_layout Subsubsection*
3) Create Verilog test benches and run simulation to verify your properties,
 justify your testresult.
 (show the test result in script form instead of wave form)
\end_layout

\begin_layout Subsubsection*
4) Model the design in NuSMV
\end_layout

\begin_layout Subsubsection*
5) Prove/disprove them by the NuSMV package.
\end_layout

\begin_layout Subsubsection*
6) Explain why the property is true or false and if the test result meets
 your expectation.
\end_layout

\begin_layout Subsubsection*
7) Compare the model checking to simulation, and discuss the advantages
 and disadvantages of the above two verification methods.
\end_layout

\end_body
\end_document
