#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass paper
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
PROJECT 2: 
\end_layout

\begin_layout SubTitle
Project: Product Machine and State Enumeration 
\end_layout

\begin_layout Author
Nikolay Nikolov
\end_layout

\begin_layout Date
Summer 2020
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Problem 1: 
\end_layout

\begin_layout Description
Design a sequential circuit S1 with the following requirements 
\end_layout

\begin_layout Description
a) The combination logic part for the next state function should contain
 at least 2 NAND gates, 1 XOR gate, and one NOR.
\end_layout

\begin_layout Description
b) The number of the flip-flops should be at least 2.
 
\end_layout

\begin_layout Description
c) The sequential circuit should have an output.
 
\end_layout

\begin_layout Description
d) Make sure that your design be different from those used by other students.
 
\end_layout

\begin_layout Description
If your design is identical to some design used by other students, further
 investigation will be conducted and you will be asked to revise your design
 and redo the work.
 
\end_layout

\begin_layout Subsection
Draw your sequential circuit S
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename assets/pasted2.png
	lyxscale 50
	width 60page%
	height 60pheight%
	keepAspectRatio

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Sequential Circuit Schematic for S
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Create the next state function table for S1
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Present 	
\end_layout

\begin_layout Plain Layout

State	Input Next State Output
\end_layout

\begin_layout Plain Layout

A	B	X	A	B	Y
\end_layout

\begin_layout Plain Layout

0	0	0	0	0	0
\end_layout

\begin_layout Plain Layout

0	0	1	0	1	0
\end_layout

\begin_layout Plain Layout

0	1	0	0	0	1
\end_layout

\begin_layout Plain Layout

0	1	1	1	0	0
\end_layout

\begin_layout Plain Layout

1	0	0	0	0	1
\end_layout

\begin_layout Plain Layout

1	0	1	1	1	0
\end_layout

\begin_layout Plain Layout

1	1	0	0	0	0
\end_layout

\begin_layout Plain Layout

1	1	1	0	0	0
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Next State function table
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
From an initial state (you decide), explore the entire state space and draw
 the state transition graph.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename assets/state_diagram.jpg
	scale 55

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
State Diagram
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Design in verilog as a Mealy FSM
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

`timescale 1 ns/10 ps
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

module S (output reg Y,output reg [1:0] state,
\end_layout

\begin_layout Plain Layout

          input wire clk, reset, x);
\end_layout

\begin_layout Plain Layout

  
\end_layout

\begin_layout Plain Layout

   reg [1:0]         current_state, next_state;
\end_layout

\begin_layout Plain Layout

  
\end_layout

\begin_layout Plain Layout

   parameter state00 = 2'b00;
\end_layout

\begin_layout Plain Layout

   parameter state01 = 2'b01;
\end_layout

\begin_layout Plain Layout

   parameter state10 = 2'b10;
\end_layout

\begin_layout Plain Layout

   parameter state11 = 2'b11;
\end_layout

\begin_layout Plain Layout

  
\end_layout

\begin_layout Plain Layout

   assign state = current_state;
\end_layout

\begin_layout Plain Layout

  
\end_layout

\begin_layout Plain Layout

   // *********************************
\end_layout

\begin_layout Plain Layout

   // Memory block
\end_layout

\begin_layout Plain Layout

   // ********************************
\end_layout

\begin_layout Plain Layout

   always @ (posedge clk or negedge reset)
\end_layout

\begin_layout Plain Layout

     begin: STATE_MEMORY
\end_layout

\begin_layout Plain Layout

        if (!reset)
\end_layout

\begin_layout Plain Layout

          current_state <= state00;
\end_layout

\begin_layout Plain Layout

        else
\end_layout

\begin_layout Plain Layout

          current_state <= next_state;
\end_layout

\begin_layout Plain Layout

     end
\end_layout

\begin_layout Plain Layout

   // ********************************
\end_layout

\begin_layout Plain Layout

   // Next State
\end_layout

\begin_layout Plain Layout

   // ********************************
\end_layout

\begin_layout Plain Layout

   always @ (current_state or x)
\end_layout

\begin_layout Plain Layout

     begin: NEXT_STATE_LOGIC
\end_layout

\begin_layout Plain Layout

        case (current_state)
\end_layout

\begin_layout Plain Layout

          state00: 
\end_layout

\begin_layout Plain Layout

            if (x == 1'b1)
\end_layout

\begin_layout Plain Layout

            next_state = state01;
\end_layout

\begin_layout Plain Layout

          else
\end_layout

\begin_layout Plain Layout

            next_state = state00;
\end_layout

\begin_layout Plain Layout

          state01: 
\end_layout

\begin_layout Plain Layout

            if (x == 1'b1)
\end_layout

\begin_layout Plain Layout

            next_state = state10;
\end_layout

\begin_layout Plain Layout

          else
\end_layout

\begin_layout Plain Layout

            next_state = state00;
\end_layout

\begin_layout Plain Layout

          state10: 
\end_layout

\begin_layout Plain Layout

            if (x == 1'b1)
\end_layout

\begin_layout Plain Layout

            next_state = state11;
\end_layout

\begin_layout Plain Layout

          else
\end_layout

\begin_layout Plain Layout

            next_state = state00;
\end_layout

\begin_layout Plain Layout

          state11:
\end_layout

\begin_layout Plain Layout

             next_state = state00;
\end_layout

\begin_layout Plain Layout

          default: next_state = state00;
\end_layout

\begin_layout Plain Layout

        endcase // case (current_state)
\end_layout

\begin_layout Plain Layout

     end 
\end_layout

\begin_layout Plain Layout

   // ********************************
\end_layout

\begin_layout Plain Layout

   // Output Logic
\end_layout

\begin_layout Plain Layout

   // ********************************
\end_layout

\begin_layout Plain Layout

   always @ (current_state or x)
\end_layout

\begin_layout Plain Layout

     begin : OUTPUT_LOGIC
\end_layout

\begin_layout Plain Layout

        case (current_state)
\end_layout

\begin_layout Plain Layout

          state00:
\end_layout

\begin_layout Plain Layout

              Y = 1'b0;
\end_layout

\begin_layout Plain Layout

          state01:
\end_layout

\begin_layout Plain Layout

            if (x == 1'b0)
\end_layout

\begin_layout Plain Layout

              Y = 1'b1;
\end_layout

\begin_layout Plain Layout

            else
\end_layout

\begin_layout Plain Layout

              Y = 1'b0;
\end_layout

\begin_layout Plain Layout

          state10:
\end_layout

\begin_layout Plain Layout

            if (x == 1'b0)
\end_layout

\begin_layout Plain Layout

              Y = 1'b1;
\end_layout

\begin_layout Plain Layout

            else
\end_layout

\begin_layout Plain Layout

              Y = 1'b0;
\end_layout

\begin_layout Plain Layout

          state11:
\end_layout

\begin_layout Plain Layout

              Y= 1'b1;
\end_layout

\begin_layout Plain Layout

          default: Y = 1'b0;
\end_layout

\begin_layout Plain Layout

        endcase // case (current_state)
\end_layout

\begin_layout Plain Layout

     end
\end_layout

\begin_layout Plain Layout

endmodule // S
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// TestBench
\end_layout

\begin_layout Plain Layout

`timescale 1 ns/10 ps
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

module tb_S ();
\end_layout

\begin_layout Plain Layout

   	wire Y;
\end_layout

\begin_layout Plain Layout

   	reg  clk, reset, x;
\end_layout

\begin_layout Plain Layout

  	reg [1:0] state;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  S DUT (.Y(Y),.state(state),.clk(clk), .reset(reset), .x(x));
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

   initial
\end_layout

\begin_layout Plain Layout

     begin
\end_layout

\begin_layout Plain Layout

        reset = 1'b0;
\end_layout

\begin_layout Plain Layout

        reset= 1'b1;
\end_layout

\begin_layout Plain Layout

     end
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

   initial
\end_layout

\begin_layout Plain Layout

     begin
\end_layout

\begin_layout Plain Layout

        clk= 1'b0;
\end_layout

\begin_layout Plain Layout

     end
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

   always
\end_layout

\begin_layout Plain Layout

     begin
\end_layout

\begin_layout Plain Layout

        #5 clk= ~clk;
\end_layout

\begin_layout Plain Layout

     end
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

   initial
\end_layout

\begin_layout Plain Layout

     begin
\end_layout

\begin_layout Plain Layout

            x = 1'b0;
\end_layout

\begin_layout Plain Layout

        #9 x = 1'b1;
\end_layout

\begin_layout Plain Layout

        #9 x = 1'b1;
\end_layout

\begin_layout Plain Layout

        #9 x = 1'b1;
\end_layout

\begin_layout Plain Layout

        #9 x = 1'b1;
\end_layout

\begin_layout Plain Layout

        #9 x = 1'b1;
\end_layout

\begin_layout Plain Layout

        #9 x = 1'b1;
\end_layout

\begin_layout Plain Layout

        #9 x = 1'b1;
\end_layout

\begin_layout Plain Layout

        #9 x = 1'b1;
\end_layout

\begin_layout Plain Layout

        #9 x = 1'b1;
\end_layout

\begin_layout Plain Layout

        #9 x = 1'b1;
\end_layout

\begin_layout Plain Layout

        #9 x = 1'b1;
\end_layout

\begin_layout Plain Layout

        #9 x = 1'b1;
\end_layout

\begin_layout Plain Layout

        #9 x = 1'b0;
\end_layout

\begin_layout Plain Layout

        #9 x = 1'b0;
\end_layout

\begin_layout Plain Layout

        #9 x = 1'b0;
\end_layout

\begin_layout Plain Layout

        #9 x = 1'b1;
\end_layout

\begin_layout Plain Layout

        #9 x = 1'b0;
\end_layout

\begin_layout Plain Layout

        #9 x = 1'b1;
\end_layout

\begin_layout Plain Layout

       
\end_layout

\begin_layout Plain Layout

     end
\end_layout

\begin_layout Plain Layout

  
\end_layout

\begin_layout Plain Layout

  initial 
\end_layout

\begin_layout Plain Layout

    begin
\end_layout

\begin_layout Plain Layout

      $display(" state x Y");
\end_layout

\begin_layout Plain Layout

      $monitor("%2b, %2b, %2b", state, x, Y);
\end_layout

\begin_layout Plain Layout

    end 
\end_layout

\begin_layout Plain Layout

  initial
\end_layout

\begin_layout Plain Layout

    begin
\end_layout

\begin_layout Plain Layout

  $dumpfile("dump.vcd"); $dumpvars;
\end_layout

\begin_layout Plain Layout

  #500 $finish;
\end_layout

\begin_layout Plain Layout

    end 
\end_layout

\begin_layout Plain Layout

  
\end_layout

\begin_layout Plain Layout

endmodule // tb_S
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Simulation as a Mealy FSM
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

[2020-07-20 01:41:59 EDT] iverilog '-Wall' '-g2012' design.sv testbench.sv
  && unbuffer vvp a.out  
\end_layout

\begin_layout Plain Layout

 state x Y
\end_layout

\begin_layout Plain Layout

VCD info: dumpfile dump.vcd opened for output.
\end_layout

\begin_layout Plain Layout

xx,  0,  0
\end_layout

\begin_layout Plain Layout

00,  0,  0
\end_layout

\begin_layout Plain Layout

00,  1,  0
\end_layout

\begin_layout Plain Layout

01,  1,  0
\end_layout

\begin_layout Plain Layout

10,  1,  0
\end_layout

\begin_layout Plain Layout

11,  1,  1
\end_layout

\begin_layout Plain Layout

00,  1,  0
\end_layout

\begin_layout Plain Layout

01,  1,  0
\end_layout

\begin_layout Plain Layout

10,  1,  0
\end_layout

\begin_layout Plain Layout

11,  1,  1
\end_layout

\begin_layout Plain Layout

00,  1,  0
\end_layout

\begin_layout Plain Layout

01,  1,  0
\end_layout

\begin_layout Plain Layout

10,  1,  0
\end_layout

\begin_layout Plain Layout

11,  1,  1
\end_layout

\begin_layout Plain Layout

11,  0,  1
\end_layout

\begin_layout Plain Layout

00,  0,  1
\end_layout

\begin_layout Plain Layout

00,  1,  0
\end_layout

\end_inset


\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename assets/new_wave.jpg
	width 60pheight%
	height 60page%
	keepAspectRatio

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Timing Diagram
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section
Problem 2: 
\end_layout

\begin_layout Standard
Get a copy of S1 and name it as S2.
 
\end_layout

\begin_layout Standard
a) Except the inputs, please add the index 1 to all the wire names of S1,
 while adding the index 2 to all the wire names of S2.
 
\end_layout

\begin_layout Standard
b) To use the shared input product machine, please make sure that the correspond
ing inputs have the same variable names.
 
\end_layout

\begin_layout Standard
c) Build the product machine with the shared same input P=S1S2 (as defined
 in class)
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Subsection
Source Code for S2
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

timescale 1 ns/10 ps
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

module S2 (output reg Y2, output reg [1:0] state2,
\end_layout

\begin_layout Plain Layout

           input wire clk, reset, x2);
\end_layout

\begin_layout Plain Layout

   
\end_layout

\begin_layout Plain Layout

   reg [1:0]          current_state, next_state;
\end_layout

\begin_layout Plain Layout

   
\end_layout

\begin_layout Plain Layout

   parameter state00 = 2'b00;
\end_layout

\begin_layout Plain Layout

   parameter state01 = 2'b01;
\end_layout

\begin_layout Plain Layout

   parameter state10 = 2'b10;
\end_layout

\begin_layout Plain Layout

   parameter state11 = 2'b11;
\end_layout

\begin_layout Plain Layout

   // *********************************
\end_layout

\begin_layout Plain Layout

   // Memory block
\end_layout

\begin_layout Plain Layout

   // ********************************
\end_layout

\begin_layout Plain Layout

   always @ (posedge clk or negedge reset)
\end_layout

\begin_layout Plain Layout

     begin: STATE_MEMORY
\end_layout

\begin_layout Plain Layout

        if (!reset)
\end_layout

\begin_layout Plain Layout

          current_state <= state00;
\end_layout

\begin_layout Plain Layout

        else
\end_layout

\begin_layout Plain Layout

          current_state <= next_state;
\end_layout

\begin_layout Plain Layout

     end
\end_layout

\begin_layout Plain Layout

   // ********************************
\end_layout

\begin_layout Plain Layout

   // Next State
\end_layout

\begin_layout Plain Layout

   // ********************************
\end_layout

\begin_layout Plain Layout

   always @ (current_state or x2)
\end_layout

\begin_layout Plain Layout

     begin: NEXT_STATE_LOGIC
\end_layout

\begin_layout Plain Layout

        case (current_state)
\end_layout

\begin_layout Plain Layout

          state00: 
\end_layout

\begin_layout Plain Layout

            if (x2 == 1'b1)
\end_layout

\begin_layout Plain Layout

              next_state = state01;
\end_layout

\begin_layout Plain Layout

            else
\end_layout

\begin_layout Plain Layout

              next_state = state00;
\end_layout

\begin_layout Plain Layout

          state01: 
\end_layout

\begin_layout Plain Layout

            if (x2 == 1'b1)
\end_layout

\begin_layout Plain Layout

              next_state = state10;
\end_layout

\begin_layout Plain Layout

            else
\end_layout

\begin_layout Plain Layout

              next_state = state00;
\end_layout

\begin_layout Plain Layout

          state10: 
\end_layout

\begin_layout Plain Layout

            if (x2 == 1'b1)
\end_layout

\begin_layout Plain Layout

              next_state = state11;
\end_layout

\begin_layout Plain Layout

            else
\end_layout

\begin_layout Plain Layout

              next_state = state00;
\end_layout

\begin_layout Plain Layout

          state11:
\end_layout

\begin_layout Plain Layout

            next_state = state00;
\end_layout

\begin_layout Plain Layout

          default: next_state = state00;
\end_layout

\begin_layout Plain Layout

        endcase // case (current_state)
\end_layout

\begin_layout Plain Layout

     end 
\end_layout

\begin_layout Plain Layout

   // ********************************
\end_layout

\begin_layout Plain Layout

   // Output Logic
\end_layout

\begin_layout Plain Layout

   // ********************************
\end_layout

\begin_layout Plain Layout

   always @ (current_state or x2)
\end_layout

\begin_layout Plain Layout

     begin : OUTPUT_LOGIC
\end_layout

\begin_layout Plain Layout

        case (current_state)
\end_layout

\begin_layout Plain Layout

          state00:
\end_layout

\begin_layout Plain Layout

            Y2 = 1'b0;
\end_layout

\begin_layout Plain Layout

          state01:
\end_layout

\begin_layout Plain Layout

            if (x2 == 1'b0)
\end_layout

\begin_layout Plain Layout

              Y2 = 1'b1;
\end_layout

\begin_layout Plain Layout

            else
\end_layout

\begin_layout Plain Layout

              Y2 = 1'b0;
\end_layout

\begin_layout Plain Layout

          state10:
\end_layout

\begin_layout Plain Layout

            if (x2 == 1'b0)
\end_layout

\begin_layout Plain Layout

              Y2 = 1'b1;
\end_layout

\begin_layout Plain Layout

            else
\end_layout

\begin_layout Plain Layout

              Y2 = 1'b0;
\end_layout

\begin_layout Plain Layout

          state11:
\end_layout

\begin_layout Plain Layout

            Y2= 1'b1;
\end_layout

\begin_layout Plain Layout

          default: Y2 = 1'b0;
\end_layout

\begin_layout Plain Layout

        endcase // case (current_state)
\end_layout

\begin_layout Plain Layout

     end
\end_layout

\begin_layout Plain Layout

   
\end_layout

\begin_layout Plain Layout

   always @ (current_state or x2)
\end_layout

\begin_layout Plain Layout

     begin
\end_layout

\begin_layout Plain Layout

        state2 = current_state;
\end_layout

\begin_layout Plain Layout

     end 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

endmodule // S2
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
S2 source code
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Test-bench for S2
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

`timescale 1 ns/10 ps
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

module tb_S2 ();
\end_layout

\begin_layout Plain Layout

   wire Y2;
\end_layout

\begin_layout Plain Layout

   reg  clk, reset, x2;
\end_layout

\begin_layout Plain Layout

   wire [1:0] state2;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

   S2 DUT (.Y2(Y2),.state2(state2),.clk(clk), .reset(reset), .x2(x2));
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

   initial
\end_layout

\begin_layout Plain Layout

     begin
\end_layout

\begin_layout Plain Layout

        reset = 1'b0;
\end_layout

\begin_layout Plain Layout

        #10 reset= 1'b1;
\end_layout

\begin_layout Plain Layout

     end
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

   initial
\end_layout

\begin_layout Plain Layout

     begin
\end_layout

\begin_layout Plain Layout

        clk= 1'b0;
\end_layout

\begin_layout Plain Layout

     end
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

   always
\end_layout

\begin_layout Plain Layout

     begin
\end_layout

\begin_layout Plain Layout

        #5 clk= ~clk;
\end_layout

\begin_layout Plain Layout

     end
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

   initial
\end_layout

\begin_layout Plain Layout

     begin
\end_layout

\begin_layout Plain Layout

            x2 = 1'b0;
\end_layout

\begin_layout Plain Layout

        #9 x2 = 1'b1;
\end_layout

\begin_layout Plain Layout

        #9 x2 = 1'b1;
\end_layout

\begin_layout Plain Layout

        #9 x2 = 1'b1;
\end_layout

\begin_layout Plain Layout

        #9 x2 = 1'b1;
\end_layout

\begin_layout Plain Layout

        #9 x2 = 1'b0;
\end_layout

\begin_layout Plain Layout

        #9 x2 = 1'b1;
\end_layout

\begin_layout Plain Layout

        #9 x2 = 1'b0;
\end_layout

\begin_layout Plain Layout

        #9 x2 = 1'b1;
\end_layout

\begin_layout Plain Layout

        #9 x2 = 1'b1;
\end_layout

\begin_layout Plain Layout

        #9 x2 = 1'b1;
\end_layout

\begin_layout Plain Layout

        #9 x2 = 1'b1;
\end_layout

\begin_layout Plain Layout

        #9 x2 = 1'b1;
\end_layout

\begin_layout Plain Layout

        #9 x2 = 1'b0;
\end_layout

\begin_layout Plain Layout

        #9 x2 = 1'b0;
\end_layout

\begin_layout Plain Layout

        #9 x2 = 1'b0;
\end_layout

\begin_layout Plain Layout

        #9 x2 = 1'b1;
\end_layout

\begin_layout Plain Layout

        #9 x2 = 1'b0;
\end_layout

\begin_layout Plain Layout

        #9 x2 = 1'b1;
\end_layout

\begin_layout Plain Layout

       
\end_layout

\begin_layout Plain Layout

     end
\end_layout

\begin_layout Plain Layout

  
\end_layout

\begin_layout Plain Layout

  initial 
\end_layout

\begin_layout Plain Layout

    begin
\end_layout

\begin_layout Plain Layout

      $display(" state2 x2 Y2");
\end_layout

\begin_layout Plain Layout

      $monitor("%2b, %2b %2b", state2, x2, Y2);
\end_layout

\begin_layout Plain Layout

    end 
\end_layout

\begin_layout Plain Layout

  initial
\end_layout

\begin_layout Plain Layout

    begin
\end_layout

\begin_layout Plain Layout

       
\end_layout

\begin_layout Plain Layout

  #500 $finish;
\end_layout

\begin_layout Plain Layout

    end 
\end_layout

\begin_layout Plain Layout

  
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
S2 Test-bech
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Timing Diagram for S2
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
S2 Timing Diagram
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Trace for S2
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sim 582P2.tb_S2
\end_layout

\begin_layout Plain Layout

# vsim 582P2.tb_S2 
\end_layout

\begin_layout Plain Layout

# Start time: 21:37:48 on Jul 22,2020
\end_layout

\begin_layout Plain Layout

# Loading 582P2.tb_S2
\end_layout

\begin_layout Plain Layout

# Loading 582P2.S2
\end_layout

\begin_layout Plain Layout

add wave sim:/tb_S2/*
\end_layout

\begin_layout Plain Layout

run -all
\end_layout

\begin_layout Plain Layout

#  state2 x2 Y2
\end_layout

\begin_layout Plain Layout

# 00, 00 00
\end_layout

\begin_layout Plain Layout

# 00, 01 00
\end_layout

\begin_layout Plain Layout

# 01, 01 00
\end_layout

\begin_layout Plain Layout

# 10, 01 00
\end_layout

\begin_layout Plain Layout

# 11, 01 01
\end_layout

\begin_layout Plain Layout

# 00, 00 00
\end_layout

\begin_layout Plain Layout

# 00, 01 00
\end_layout

\begin_layout Plain Layout

# 01, 01 00
\end_layout

\begin_layout Plain Layout

# 01, 00 01
\end_layout

\begin_layout Plain Layout

# 00, 00 00
\end_layout

\begin_layout Plain Layout

# 00, 01 00
\end_layout

\begin_layout Plain Layout

# 01, 01 00
\end_layout

\begin_layout Plain Layout

# 10, 01 00
\end_layout

\begin_layout Plain Layout

# 11, 01 01
\end_layout

\begin_layout Plain Layout

# 00, 01 00
\end_layout

\begin_layout Plain Layout

# 01, 01 00
\end_layout

\begin_layout Plain Layout

# 01, 00 01
\end_layout

\begin_layout Plain Layout

# 00, 00 00
\end_layout

\begin_layout Plain Layout

# 00, 01 00
\end_layout

\begin_layout Plain Layout

# 01, 01 00
\end_layout

\begin_layout Plain Layout

# 01, 00 01
\end_layout

\begin_layout Plain Layout

# 00, 00 00
\end_layout

\begin_layout Plain Layout

# 00, 01 00
\end_layout

\begin_layout Plain Layout

# 01, 01 00
\end_layout

\begin_layout Plain Layout

# 10, 01 00
\end_layout

\begin_layout Plain Layout

# 11, 01 01
\end_layout

\begin_layout Plain Layout

# 00, 01 00
\end_layout

\begin_layout Plain Layout

# 01, 01 00
\end_layout

\begin_layout Plain Layout

# 10, 01 00
\end_layout

\begin_layout Plain Layout

# 11, 01 01
\end_layout

\begin_layout Plain Layout

# 00, 01 00
\end_layout

\begin_layout Plain Layout

# 01, 01 00
\end_layout

\begin_layout Plain Layout

# 10, 01 00
\end_layout

\begin_layout Plain Layout

# 11, 01 01
\end_layout

\begin_layout Plain Layout

# 00, 01 00
\end_layout

\begin_layout Plain Layout

# 01, 01 00
\end_layout

\begin_layout Plain Layout

# 10, 01 00
\end_layout

\begin_layout Plain Layout

# 11, 01 01
\end_layout

\begin_layout Plain Layout

# 00, 01 00
\end_layout

\begin_layout Plain Layout

# 01, 01 00
\end_layout

\begin_layout Plain Layout

# 10, 01 00
\end_layout

\begin_layout Plain Layout

# 11, 01 01
\end_layout

\begin_layout Plain Layout

# 00, 01 00
\end_layout

\begin_layout Plain Layout

# 01, 01 00
\end_layout

\begin_layout Plain Layout

# 10, 01 00
\end_layout

\begin_layout Plain Layout

# 11, 01 01
\end_layout

\begin_layout Plain Layout

# 00, 01 00
\end_layout

\begin_layout Plain Layout

# 01, 01 00
\end_layout

\begin_layout Plain Layout

# 10, 01 00
\end_layout

\begin_layout Plain Layout

# 11, 01 01
\end_layout

\begin_layout Plain Layout

# 00, 01 00
\end_layout

\begin_layout Plain Layout

# 01, 01 00
\end_layout

\begin_layout Plain Layout

# 10, 01 00
\end_layout

\begin_layout Plain Layout

# 11, 01 01
\end_layout

\begin_layout Plain Layout

# 00, 01 00
\end_layout

\begin_layout Plain Layout

# 01, 01 00
\end_layout

\begin_layout Plain Layout

# 10, 01 00
\end_layout

\begin_layout Plain Layout

# ** Note: $finish    : source/tb_S2.v(58)
\end_layout

\begin_layout Plain Layout

#    Time: 500 ns  Iteration: 0  Instance: /tb_S2
\end_layout

\begin_layout Plain Layout

# 1
\end_layout

\begin_layout Plain Layout

# Break in Module tb_S2 at source/tb_S2.v line 58
\end_layout

\begin_layout Plain Layout

# Can't move the Now cursor.
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Product State Machine
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

timescale 1 ns/10 ps
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

module top (output wire Y1, 
\end_layout

\begin_layout Plain Layout

            output wire       Y2, 
\end_layout

\begin_layout Plain Layout

            output wire [1:0] state1,
\end_layout

\begin_layout Plain Layout

            output wire [1:0] state2,
\end_layout

\begin_layout Plain Layout

            input wire       clk, reset, x);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

   S1 U1 (.Y1(Y1),.state1(state1),.clk(clk), .reset(reset), .x1(x));
\end_layout

\begin_layout Plain Layout

   S2 U2 (.Y2(Y2),.state2(state2),.clk(clk), .reset(reset), .x2(x));
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

endmodule 
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Transcript from simulation
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

vsim 582P2.tb_top
\end_layout

\begin_layout Plain Layout

# vsim 582P2.tb_top 
\end_layout

\begin_layout Plain Layout

# Start time: 22:45:27 on Jul 22,2020
\end_layout

\begin_layout Plain Layout

# Loading 582P2.tb_top
\end_layout

\begin_layout Plain Layout

# Loading 582P2.top
\end_layout

\begin_layout Plain Layout

# Loading 582P2.S1
\end_layout

\begin_layout Plain Layout

# Loading 582P2.S2
\end_layout

\begin_layout Plain Layout

add wave sim:/tb_top/*
\end_layout

\begin_layout Plain Layout

run -all
\end_layout

\begin_layout Plain Layout

#  x     state1     Y1      state2    Y2
\end_layout

\begin_layout Plain Layout

# 00 00 00  00 00
\end_layout

\begin_layout Plain Layout

# 01 00 00  00 00
\end_layout

\begin_layout Plain Layout

# 01 01 00  01 00
\end_layout

\begin_layout Plain Layout

# 01 10 00  10 00
\end_layout

\begin_layout Plain Layout

# 01 11 01  11 01
\end_layout

\begin_layout Plain Layout

# 00 00 00  00 00
\end_layout

\begin_layout Plain Layout

# 01 00 00  00 00
\end_layout

\begin_layout Plain Layout

# 01 01 00  01 00
\end_layout

\begin_layout Plain Layout

# 00 01 01  01 01
\end_layout

\begin_layout Plain Layout

# 00 00 00  00 00
\end_layout

\begin_layout Plain Layout

# 01 00 00  00 00
\end_layout

\begin_layout Plain Layout

# 01 01 00  01 00
\end_layout

\begin_layout Plain Layout

# 01 10 00  10 00
\end_layout

\begin_layout Plain Layout

# 01 11 01  11 01
\end_layout

\begin_layout Plain Layout

# 01 00 00  00 00
\end_layout

\begin_layout Plain Layout

# 01 01 00  01 00
\end_layout

\begin_layout Plain Layout

# 00 01 01  01 01
\end_layout

\begin_layout Plain Layout

# 00 00 00  00 00
\end_layout

\begin_layout Plain Layout

# 01 00 00  00 00
\end_layout

\begin_layout Plain Layout

# 01 01 00  01 00
\end_layout

\begin_layout Plain Layout

# 00 01 01  01 01
\end_layout

\begin_layout Plain Layout

# 00 00 00  00 00
\end_layout

\begin_layout Plain Layout

# 01 00 00  00 00
\end_layout

\begin_layout Plain Layout

# 01 01 00  01 00
\end_layout

\begin_layout Plain Layout

# 01 10 00  10 00
\end_layout

\begin_layout Plain Layout

# 01 11 01  11 01
\end_layout

\begin_layout Plain Layout

# 01 00 00  00 00
\end_layout

\begin_layout Plain Layout

# 01 01 00  01 00
\end_layout

\begin_layout Plain Layout

# 01 10 00  10 00
\end_layout

\begin_layout Plain Layout

# 01 11 01  11 01
\end_layout

\begin_layout Plain Layout

# 01 00 00  00 00
\end_layout

\begin_layout Plain Layout

# 01 01 00  01 00
\end_layout

\begin_layout Plain Layout

# 01 10 00  10 00
\end_layout

\begin_layout Plain Layout

# 01 11 01  11 01
\end_layout

\begin_layout Plain Layout

# 01 00 00  00 00
\end_layout

\begin_layout Plain Layout

# 01 01 00  01 00
\end_layout

\begin_layout Plain Layout

# 01 10 00  10 00
\end_layout

\begin_layout Plain Layout

# 01 11 01  11 01
\end_layout

\begin_layout Plain Layout

# 01 00 00  00 00
\end_layout

\begin_layout Plain Layout

# 01 01 00  01 00
\end_layout

\begin_layout Plain Layout

# 01 10 00  10 00
\end_layout

\begin_layout Plain Layout

# 01 11 01  11 01
\end_layout

\begin_layout Plain Layout

# 01 00 00  00 00
\end_layout

\begin_layout Plain Layout

# 01 01 00  01 00
\end_layout

\begin_layout Plain Layout

# 01 10 00  10 00
\end_layout

\begin_layout Plain Layout

# 01 11 01  11 01
\end_layout

\begin_layout Plain Layout

# 01 00 00  00 00
\end_layout

\begin_layout Plain Layout

# 01 01 00  01 00
\end_layout

\begin_layout Plain Layout

# 01 10 00  10 00
\end_layout

\begin_layout Plain Layout

# 01 11 01  11 01
\end_layout

\begin_layout Plain Layout

# 01 00 00  00 00
\end_layout

\begin_layout Plain Layout

# 01 01 00  01 00
\end_layout

\begin_layout Plain Layout

# 01 10 00  10 00
\end_layout

\begin_layout Plain Layout

# 01 11 01  11 01
\end_layout

\begin_layout Plain Layout

# 01 00 00  00 00
\end_layout

\begin_layout Plain Layout

# 01 01 00  01 00
\end_layout

\begin_layout Plain Layout

# 01 10 00  10 00
\end_layout

\begin_layout Plain Layout

# ** Note: $finish    : source/tb_top.v(57)
\end_layout

\end_inset


\end_layout

\end_body
\end_document
